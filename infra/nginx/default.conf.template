server {
    listen 80;
    listen [::]:80;
    server_name your_domain_placeholder.com www.your_domain_placeholder.com; # Replace with actual domain

    # Serve ACME challenges for Certbot HTTP-01 validation
    # This location block tells Nginx to serve files for Certbot's http-01 challenge
    # from the /var/www/certbot directory (which is mapped from ./infra/nginx/certbot_webroot).
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        # allow all; # Optional, if there are any deny rules elsewhere
    }

    # Hide .well-known directory from general access if needed, though Certbot needs it.
    # location ~ /\.well-known {
    #     deny all;
    # }

    location / {
        # Redirect all other HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your_domain_placeholder.com www.your_domain_placeholder.com; # Replace with actual domain

    # SSL Configuration - Paths must match where certbot saves them via docker volume
    ssl_certificate /etc/letsencrypt/live/your_domain_placeholder.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your_domain_placeholder.com/privkey.pem;

    # Recommended SSL options from Certbot (these files would be generated by Certbot)
    # If these files don't exist yet (e.g. first time setup before certbot run),
    # Nginx might fail to start. Comment them out for initial setup if necessary.
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Basic SSL settings if the above includes are not used initially
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off; # Modern browsers have good cipher selection
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_session_cache shared:SSL:10m; # Adjust as needed
    ssl_session_timeout 1d; # Adjust as needed
    ssl_session_tickets off; # Recommended for better Perfect Forward Secrecy

    # Security Headers (uncomment and customize as needed)
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    # add_header X-Frame-Options "SAMEORIGIN" always;
    # add_header X-Content-Type-Options "nosniff" always;
    # add_header X-XSS-Protection "1; mode=block" always;
    # add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    client_max_body_size 10M; # For file uploads

    # Serve React App
    location / {
        root /usr/share/nginx/html; # Corresponds to dental-website-dist volume
        try_files $uri /index.html;
    }

    # Proxy API and static uploads from backend
    # Requests to /api/... or /static/uploads/... will be forwarded to the backend service
    location ~ ^/(api|static/uploads) {
        proxy_pass http://backend:5000; # 'backend' is the service name in docker-compose.yml
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Important: Set X-Forwarded-Proto to https so Flask knows connection is secure
        proxy_set_header X-Forwarded-Proto https;
    }

    # Optional: Add specific error pages or logging
    # error_log /var/log/nginx/your_domain.error.log warn;
    # access_log /var/log/nginx/your_domain.access.log main; # 'main' format needs to be defined in http block or nginx.conf
}
